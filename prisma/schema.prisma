// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(50)
  email        String      @unique @db.VarChar(50)
  password     String      @db.VarChar(100)
  dob          DateTime?   @db.Date
  profileImage String?     @db.VarChar(255)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
  playlists    Playlists[]
  followers    Followers[]
  likes        Likes[]
}

model Artists {
  id           Int         @id @default(autoincrement())
  fullname         String      @db.VarChar(50)
  genre        Int
  profileImage String?     @db.VarChar(255)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?
  albums       Albums[]
  songs        Songs[]
  followers    Followers[]
}

model Genres {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(50) @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  songs      Songs[]
}

model Albums {
  id           Int       @id @default(autoincrement())
  artist_id    Int
  name         String    @db.VarChar(50)
  release_date DateTime  @db.Date
  image        String?   @db.VarChar(255)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  artist       Artists   @relation(fields: [artist_id], references: [id])
  songs        Songs[]
}

model Songs {
  id             Int              @id @default(autoincrement())
  artist_id      Int
  album_id       Int?
  genre_id       Int
  name           String           @db.VarChar(50)
  duration       Float
  path           String?          @db.VarChar(255)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
  artist         Artists          @relation(fields: [artist_id], references: [id])
  genres         Genres           @relation(fields: [genre_id], references: [id])
  albums         Albums?           @relation(fields: [album_id], references: [id])
  playlist_songs Playlist_Songs[]
  likes          Likes[]
}

model Playlists {
  id             Int              @id @default(autoincrement())
  user_id        Int
  name           String           @db.VarChar(50)
  image          String?          @db.VarChar(255)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
  users          Users            @relation(fields: [user_id], references: [id])
  playlist_songs Playlist_Songs[]
}

model Playlist_Songs {
  playlist_id Int
  song_id     Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  songs       Songs     @relation(fields: [song_id], references: [id])
  playlist    Playlists @relation(fields: [playlist_id], references: [id])

  @@id([playlist_id, song_id])
}

model Followers {
  user_id    Int
  artist_id  Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  users      Users     @relation(fields: [user_id], references: [id])
  artists    Artists   @relation(fields: [artist_id], references: [id])

  @@id([user_id, artist_id])
}

model Likes {
  user_id    Int
  song_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  users      Users     @relation(fields: [user_id], references: [id])
  songs      Songs     @relation(fields: [song_id], references: [id])

  @@id([user_id, song_id])
}
